---
title: "R e RStudio"
subtitle: "Aula 1"
author: "Bruno Montezano"
institute: "Grupo Alliance<br>Programa de Pós-Graduação em Psiquiatria e Ciências do Comportamento<br>Universidade Federal do Rio Grande do Sul"
date: last-modified
date-format: long
lang: pt-br
execute:
  echo: true
format:
  revealjs:
    incremental: true
    smaller: true
    theme: [default, ../assets/custom.scss]
    logo: "../assets/logo_ufrgs.png"
editor_options: 
  chunk_output_type: console
---

## Objetivos do curso

- Desenvolver habilidades básicas no manejo e visualização de dados em R

- Aprender conceitos básicos de programação

- Introduzir conceitos e rotinas de análise de dados em saúde

## Quem sou eu?

#### Bruno Montezano

- Psicólogo

- Mestrando em Psiquiatria e Ciências do Comportamento

- Integrante do grupo de pesquisa Alliance

- Pesquisa
  - Psiquiatria de precisão
  - Aprendizado de máquina
  - Transtorno bipolar
  - Suicídio
  
## Logística do curso

Como será realizado?

. . .

::: {.nonincremental}
- Sete aulas virtuais
- Plataforma Google Meet ou Zoom
- Segunda às 19h
- Duração média: 45min
:::

. . .

Materiais: [https://brunomontezano.github.io/r-workshop/](https://brunomontezano.github.io/r-workshop/)

## Conteúdo de hoje

- O que é o R e por que usá-lo?

- Visão geral do RStudio

- Comandos básicos do R
  - Vetores
  - Data frames
  - Funções
  - Pacotes
  - Ajuda
  
## Materiais

Todos os materiais do curso estarão no
[site do curso](https://brunomontezano.github.io/r-workshop/).

::: {.nonincremental}
- Slides e códigos usados para gerar os slides
- Links com outros materiais sugeridos
:::

Se algo não estiver funcionado no site, [me enviem um email](mailto:bmontezano@hcpa.edu.br)!

## Cronograma de aulas

1. R e RStudio (10/04/2023)
2. Manipulação de dados (17/04/2023)
3. Visualização de dados (24/04/2023)
4. Análise descritiva (01/05/2023)
5. Inferência estatística (08/05/2023)
6. Modelos de regressão (15/05/2023)
7. Tópicos avançados (22/05/2023)

. . .

Lembrando que todas as aulas serão realizadas às 19h do horário de Brasília.


## Por que aprender análise quantitativa de dados?

*Vocês vão ler pesquisa quantitativa*

- Interpretação
- Avaliação 

. . .

*Vocês podem fazer pesquisa quantitativa*

- Análise
- Comunicação

## Formatação dos slides

**Negrito** indica um termo importante.

. . .

*Itálico* indica ênfase ou instruções para clicar com o mouse.

::: {.nonincremental}
- Exemplo: "Clique em *Arquivo > Salvar como...*".
:::

. . .

`Código` representa o código em R para ser digitado ou
teclas para realizar ações.

::: {.nonincremental}
- Exemplo: "Pressione `Ctrl-P` para abrir a janela de impressão".
:::

. . .

Os blocos de código são *código de fato executado no R*.

```{r exemplo-formatacao}
# Quanto dá 25 vezes 11?
25 * 11
```

## Por que usar R?

R é uma linguagem de programação construída para computação estatística.

. . .

Vamos supor que vocês já tenham domínio no Excel, SPSS, Stata, ou SAS, por quê usar R?

- R é gratuito, então não precisamos de licença
- R tem uma grande comunidade para pacotes e suporte
- R consegue trabalhar com *praticamente* qualquer formato de dado
- R *facilita* o processo de replicação e reprodutibilidade
- R é uma linguagem, então é capaz de fazer *quase tudo* (vide os slides e o [site do curso](https://brunomontezano.github.io/r-workshop/))
- R é parecido com outras linguagens de programação (Python, Julia, etc)

## RStudio

O RStudio é um ambiente de desenvolvimento integrado (IDE) para facilitar nossa vida.

- Organização do código, saídas e plots
- Autocompletar e destacar o código
- Ajuda a visualizar os dados e objetos
- Habilita integração de código em R em documentos com **Quarto** e **RMarkdown**
  - Artigos
  - Livros
  - Apresentações
  - Relatórios
  - Websites e blogs
  

## Interface do RStudio

Vamos abrir o RStudio e ir em *Arquivo > Novo Arquivo > R Script*.

![](../assets/interface_rstudio.png){fig-align="center" width=95%}

## Editando e executando código em R

Podemos executar (rodar) nosso código de diversas formas:

- Selecionar linhas no **Editor** e clicar em *Executar* no topo ou pressione
`Ctrl+Enter` ou `⌘+Enter` para rodar a seleção

- Com o seu **cursor** (`|`) na linha que você quer executar,
pressione `Ctrl+Enter` ou `⌘+Enter`. Notem que o cursor se move para a próxima linha,
para que possamos rodar vários códigos em sequência

- Escreva linhas individuais no **Console** e pressione `Enter`

. . .

O **Console** vai mostrar as linhas que você rodou seguido pela saída.

## R como calculadora

No **Console**, vamos digitar `111 + 222 + 333` e pressionar `Enter`.

```{r soma}
111 + 222 + 333
```

. . .

O `[1]` na saída indica o **índice** numérico do primeiro elemento da linha.

. . .

Agora, no nosso documento em R em branco no **Editor**, vamos digitar `sqrt(81)` e
clicar `Executar` ou pressionar `Ctrl+Enter` ou `⌘+Enter`.

```{r rodar-sqrt}
sqrt(81)
```

## Funções e Ajuda

`sqrt()` é um exemplo de **função** do R.

Se nós não soubermos o que `sqrt()` é, podemos digitar `?sqrt` no **Console** e ver
a aba de **Ajuda** na direita.

```{r ajuda-sqrt}
#| eval: false
?sqrt
```

. . .

**Argumentos** são as *entradas* de uma função. Nesse caso, o único argumento para
`sqrt()` é `x`, que pode ser um número ou um vetor de números.

Arquivos de ajuda provém documentação em como usar as funções e o que a função
retorna.

## Criando objetos

R armazena *tudo* como um **objeto**, incluindo dados, funções, modelos, e saídas.

A criação de um objeto pode ser feita usando o **operador de atribuição**: `<-`

```{r criar-objeto}
novo_objeto <- 144
```

. . .

**Operadores** como o `<-` são funções que parecem símbolos mas geralmente ficam
entre argumentos (números ou objetos) ao invés de ter eles entre `()` como na função
`sqrt(x)`

. . .

Nós fazemos contas matemáticas com operadores, por exemplo, `x + y`.

`+` é o operador de adição. Mas temos outros operadores matemáticos:

- `-`: subtração
- `*`: multiplicação
- `/`: divisão
- `^`: potenciação
- `%%` módulo (resto da divisão)

## Chamando objetos

Nós podemos mostrar ou "chamar" um objeto através do seu nome.

```{r chamar-objeto}
novo_objeto
```

. . .

Dicas para nomear objetos:

- *Não* pode iniciar com números
- Sugiro usar nomes em letra minúscula
- Sugiro usar `.` ou `_` para dividir palavras
- Usem nomes informativos
- Evitem o uso de caracteres especiais

## Usando objetos

Você pode tratar o **nome** do objeto como se ele fosse os valores armazenados no
próprio objeto.

. . .

```{r somar-dez}
novo_objeto + 10
```

```{r objeto-mais-objeto}
novo_objeto + novo_objeto
```


```{r sqrt-objeto}
sqrt(novo_objeto)
```

```{r objeto-ao-quadrado}
novo_objeto ^ 2
```

```{r objeto-par}
novo_objeto %% 2
```


## Criando vetores

Um **vetor** é uma série de **elementos**, como números, por exemplo.

Nós podemos criar um vetor usando a função `c()` que significa "combinar".

```{r criar-vetor}
novo_objeto <- c(4, 9, 16, 25, 36)
novo_objeto
```

. . .

Atribuir em um nome já existente *sobrescreve esse objeto*.

. . .

Você pode usar um vetor como argumento para várias funções.

. . .

```{r sqrt-vetor}
sqrt(novo_objeto) # Calcular raíz quadrada para cada elemento do vetor
```

```{r media-vetor}
mean(novo_objeto) # Calcular a média do vetor
```

```{r soma-vetor}
sum(novo_objeto) # Somar todos os elementos do vetor
```


## Classes

Os vetores podem assumir três **classes** principais no R.

. . .

Eles podem ser numéricos:

```{r vetor-numerico}
vetor_numerico <- 215
vetor_numerico
```

. . .

Podem ser de caractere (ou **string**):

```{r vetor-caractere}
vetor_de_caractere <- c("Bruno", "Montezano")
vetor_de_caractere
```

. . .

Ou lógicos:

```{r vetor-logico}
vetor_logico <- c(TRUE, FALSE, FALSE, TRUE)
vetor_logico
```

. . .

Lembrando que os vetores podem ter um único elemento, como o `vetor_numerico`
criado acima.

## Indexando vetores pela posição

Quando temos vetores de mais de um elemento, pode ser interessante acessar
elementos específicos. Para isso, podemos usar os colchetes (`[]`).

```{r subset-vetor}
vetor_exemplo <- c(2, 13, 22, 95)

vetor_exemplo[c(1, 3)] # Dessa forma, extraímos apenas o primeiro e o terceiro elemento
```

```{r subset-vetor-string}
animais <- c("Gato", "Cachorro", "Vaca", "Zebra", "Gorila", "Avestruz", "Cabra")

animais[3:5] # Extrair apenas do elemento 3 até o elemento 5

animais[2] # Extrair apenas o "melhor amigo do homem"
```

. . .

O **operador dois pontos** (`:`) gera um vetor usando a sequência de números inteiros do
primeiro até o segundo argumento. `3:5` equivale a `c(3, 4, 5)`.

## Indexando vetores por expressões

Temos nosso vetor de exemplo:

```{r printar-vetor}
vetor_exemplo
```


Podemos querer extrair elementos de um vetor a partir de alguma
condição, na forma de **expressões lógicas**.

. . .

```{r extrair-maior-que-cinco}
vetor_exemplo[vetor_exemplo > 15] # Extrair apenas os elementos de valor maior que 5
```

```{r extrair-menores-ou-iguais-13}
vetor_exemplo[vetor_exemplo <= 13] # Extrair elementos de valor menor ou igual a 13
```

. . .

Existem vários outros **operadores lógicos**:

- `==`: igual a
- `!=`: não é igual a
- `>`, `>=`, `<`, `>=`: menor que, menor que ou igual a, etc
- `%in%`: usado para checar igual a um entre vários valores

## Combinando expressões lógicas

Podemos combinar mais de uma condição com os seguintes operadores:

::: {.nonincremental}
- `&`: ambas condições precisam ser respeitadas (E)
- `|`: pelo menos uma condição precisa ser respeitada (OU)
- `!`: inverte uma condição lógica (`TRUE` vira `FALSE`, `FALSE` vira `TRUE`)
:::

. . .

```{r exemplo-e}
vetor_exemplo[vetor_exemplo > 5 & vetor_exemplo < 15] # Valores maiores que 5 E menores que 15
```

```{r exemplo-ou}
vetor_exemplo[vetor_exemplo > 5 | vetor_exemplo < 15] # Valores menores que 5 OU menores que 15
```

```{r exemplo-in}
vetor_exemplo[vetor_exemplo %in% c(1:15)] # Elementos que são iguais a algum número de 1 até 15
```

```{r exemplo-nao}
vetor_exemplo[!vetor_exemplo %in% c(1:15)] # Elementos que NÃO são iguais a algum número de 1 até 15
```

. . .

Agora, vamos dar uma olhada em outra estrutura de dados, os *data frames*!

## O que é um `data.frame`?

Um **data frame** é uma tabela na qual cada **coluna** contém valores de uma
**variável** e cada **linha** contém uma **observação**. Estrutura de dados
mais comum em saúde.

:::: {.columns}

::: {.column width="35%"}
- Toda coluna possui um nome
- Toda coluna possui valores de mesmo tipo
- Cada coluna deve conter o mesmo número de linhas de dados
- Cada linha deve conter o mesmo número de colunas de dados
:::

::: {.column width="65%"}
![](../assets/questionario_libreoffice.png){fig-align="center" width=100%}
:::

::::



## Criando um `data.frame`

Vamos criar um `data.frame` no R com cinco variáveis e quatro observações.

```{r criando-df}
df_aula <- data.frame(
  nome = c("Bruno", "Marcos", "Pedro", "José"),
  idade = c(18, 22, 25, 21),
  profissao = c("Psicólogo", "Professor", "Jogador de futebol", "Bombeiro"),
  tem_namorada = c("Sim", "Sim", "Não", "Sim"),
  gosta_de_r = c("Sim", "Não", "Não", "Não")
)

df_aula
```

. . .

Na próxima aula, vamos aprender a carregar nossos próprios dados para dentro do R!

## Indexando um `data.frame`

Diferente dos vetores, que são objetos unidimensionais, os *data frames possuem
duas dimensões*.

. . .

Nesse caso, vamos usar os colchetes (`[]`) para indexar a base na forma:
`objeto_do_dataframe[linha, coluna]`.

. . .

:::: {.columns}

::: {.column width="50%"}
```{r filtrar-df-aula}
df_aula[2:4, c(1, 3)]
```

```{r pintar-tabela}
#| echo: false
df_aula |> 
  dplyr::mutate(
    nome = kableExtra::cell_spec(
      nome, background = ifelse(nome %in% c("Marcos", "Pedro", "José"),
                                "orange", nome)),
    profissao = kableExtra::cell_spec(
      profissao, background = ifelse(profissao %in% c("Professor", "Jogador de futebol",
                                                 "Bombeiro"),
                                "orange", profissao))
  ) |> 
  kableExtra::kable(format = "simple")

```
:::

::: {.column width="50%"}
```{r filtrar-df-aula-todas-colunas}
df_aula[c(1, 4), ]
```

```{r pintar-tabela-todas}
#| echo: false
df_aula |> 
  kableExtra::kable(format = "html") |> 
  kableExtra::row_spec(row = c(1, 4), background = "orange")

```
:::

::::

## Indexação e colunas no `data.frame`

Também podemos indexar a partir de **expressões lógicas** assim como nos vetores.
Para isso, fazemos uso do operador `$`.

. . .

```{r tem-namorada}
df_aula[df_aula$tem_namorada == "Sim", ] # Notem que a dimensão da coluna está vazia
```

```{r nao-gosta-de-r-e-maior-que-21}
df_aula[df_aula$gosta_de_r == "Não" & df_aula$idade > 21, ] # Idade > 21 e que não gostam de R
```

. . .

O `$` pode ser usado para extrair uma coluna em forma de vetor:

```{r pegar-idade}
df_aula$idade
```

```{r media-idade}
mean(df_aula$idade)
```


## Pacotes

**Pacotes** são conjuntos de funções ou dados que podem adicionar novas
funcionalidades no R.

:::: {.columns}

::: {.column width="46%"}

![`install.packages("nomedopacote")`](../assets/rapaz_colocando_lampada.jpg){fig-align="center"}
:::

::: {.column width="54%"}
![`library(nomedopacote)`](../assets/rapaz_ligando_lampada.jpg)
:::

::::

## Instalando o pacote `dados`

O pacote `dados` disponibiliza diversas bases de dados para aprendizado.
E a melhor parte, são todas traduzidas para português!

. . .

O pacote pode ser instalado com a função `install.packages()`:

```{r instalar-dados}
#| eval: false
install.packages("dados")
```

. . .

E então carregamos com a função `library()` para usar os dados disponibilizados:

```{r carregar-dados}
library(dados)

pixar_bilheteria
```




## Tarefa de casa

- [Dê uma olhada no site do curso](https://brunomontezano.github.io/r-workshop/)
- Crie um vetor de 1 a 25 e armazene em uma variável de nome `sequencia`
  - Lembrem-se do operador `:`
- Crie um vetor de caractere de dois elementos com seu nome e último nome
(chamado `nome_completo`) e extraia seu sobrenome usando `[]`
- Filtre a base `pixar_bilheteria` do pacote `dados` 
e extraia apenas os filmes que tiveram orçamento menor que 100 milhões
  - Lembrem-se do `$`, do `<`, do `[]` e da função `library()`

## Dica: ChatGPT

- O [ChatGPT](https://chat.openai.com/chat) é um assistente virtual que pode ajudar
na aprendizagem de programação
em R para pesquisadores em saúde
- Ele pode responder a perguntas sobre sintaxe, funcionalidades e solução de problemas no R

. . .

Você pode utilizar o pacote [`gptstudio`](https://github.com/MichelNivard/GPTstudio)
para auxiliar nos códigos, gramática dos documentos,
ou para comentar seu código no RStudio.