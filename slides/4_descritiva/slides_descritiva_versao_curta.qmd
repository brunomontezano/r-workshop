---
title: "Análise descritiva"
subtitle: "Aula 4"
author: "Bruno Montezano"
institute: "Grupo Alliance<br>Programa de Pós-Graduação em Psiquiatria e Ciências do Comportamento<br>Universidade Federal do Rio Grande do Sul"
date: last-modified
date-format: long
lang: pt-br
execute:
  echo: true
format:
  revealjs:
    incremental: true
    smaller: true
    theme: [default, ../assets/custom.scss]
    logo: "../assets/logo_ufrgs.png"
---

## Conteúdo de hoje

- Medidas de tendência central
- Medidas de dispersão
- Distribuição normal
- Transformação de dados
- Tabelas de frequência

## Dados dos `pinguins`

::: columns
::: {.column width="70%"}
Hoje nós usaremos os dados dos `pinguins` do pacote `dados`.

Este conjunto de dados contém 14 variáveis de 344 observações de pinguins adultos
perto da Estação Palmer na Antártida.

Os dados incluem a espécies de pinguins e ilhas do Arquipélago Palmer,
medidas de cada espécie, sexo do pinguim e ano de documentação.
:::

::: {.column width="30%"}
![](../assets/logo_penguins.png)
:::
:::

## `pinguins`

```{r glimpse-pinguins}
library(dados)
library(tidyverse)

glimpse(pinguins)
```

```{r printar-pinguins}
pinguins
```


## Medidas de tendência central

![](../assets/meme_medidas_tendencia_central.jpg){fig-align="center" width=85%}

## Média

A média (aritmética) é o *valor esperado* de uma variável.

$$\bar{x} = \frac{1}{n}\sum_{i=1}^{n}x_{i}$$

<center>"Soma de todos os elementos dividido pelo número de
elementos"</center>

<br>

. . .

```{r calcular-media-massa-corporal}
pinguins |> 
  summarise(media_massa = mean(massa_corporal, na.rm = TRUE),
            media_comprimento_bico = mean(comprimento_bico, na.rm = TRUE))
```

## Mediana

O valor para o qual não mais da metade dos
valores é superior ou inferior, ou seja,
**o valor do meio**.


$$m(x_i) = \begin{cases} x_{\frac{n+1}{2}},& \text{se } n \text{ ímpar}\\ \frac{1}{2}(x_{\frac{n}{2}} + x_{\frac{n}{2} + 1}), &\text{se } n \text{ par}\end{cases}$$

<center>"Se $x$ tem um número ímpar de elementos, ao colocá-los em ordem, a mediana é o valor do meio. Se $x$ tem um número par de elementos, a mediana é a média dos dois valores do meio"</center>

<br>

. . .

```{r calcular-mediana-massa-corporal}
pinguins |> 
  summarise(mediana_massa = median(massa_corporal, na.rm = TRUE),
            mediana_comprimento_bico = median(comprimento_bico, na.rm = TRUE))
```

&nbsp;

## Moda

A **moda** é o valor mais **frequente** na variável.

. . .

Existem fórmulas para a moda, mas elas não são nada intuitivas, apesar da moda
ser a medida de tendência central mais intuitiva.

. . .

Vocês podem usar `count()` para ver a frequência de valores:

```{r funcao-count-especie}
pinguins |> 
  count(especie)
```

. . .

E vocês podem achar a moda diretamente com um `filter()`:

```{r achar-moda-especie}
pinguins |> 
  count(especie) |> 
  filter(n == max(n))
```

## Valores extremos

A média é sensível a valores extremos:

```{r outliers}
alturas <- c(150, 152, 154, 155, 151, 153, 215)
mean(alturas)
```

. . .

A mediana não é:

```{r mediana-outlier}
median(alturas)
```

. . .

Isso significa que a mediana pode ser uma "média" mais útil quando os dados
têm valores extremos.


Isto é comum com variáveis como renda e números de episódios auto-relatados.

## Medidas de dispersão

![](../assets/meme_variancia.jpg){fig-align="center" width=65%}

## Variância

A variância mede como os dados estão dispersos em torno da média.
Normalmente usamos a variância *amostral*:

$$
s^2 = \frac{\sum (x_i - \bar{x})^2}{n - 1}
$$

. . .

```{r variancia-massa-corporal}
pinguins |> 
  filter(!is.na(massa_corporal)) |> 
  summarise(variancia_massa = var(massa_corporal))
```

. . .

Se todos os valores são iguais, a variância é *zero*.

## Desvio padrão

O desvio padrão ($s$ ou $sd$, ou $dp$ em português) é simplesmente a raíz quadrada
da variância:

$$s = \sqrt{s^2}$$

. . .

Você pode interpretar como a distância "típica" dos valores em relação à média.

. . .

```{r desvio-padrao-massa-corporal}
pinguins |> 
  filter(!is.na(massa_corporal)) |> 
  summarise(desvio_padrao_massa = sd(massa_corporal))
```

. . .

O desvio padrão se apresenta na mesma unidade de medida da variável.

## Amplitude

A amplitude ($R$) é a medida de dispersão mais fácil de calcular. Nós subtraímos
o menor valor ($L$) do maior valor ($H$) da variável.

$$R = H - L$$

. . .

```{r amplitude-massa}
pinguins |>
  filter(!is.na(massa_corporal)) |>
  summarise(
    massa_max = max(massa_corporal),
    massa_min = min(massa_corporal),
    massa_amplitude = max(massa_corporal) - min(massa_corporal)
  )
```

## Intervalo interquartil

O intervalo interquartil representa a diferença entre o primeiro quartil (o 25º
percentil) e o terceiro quartil (o 75º percentil) de um conjunto de dados.

$$IQR = Q_3 - Q_1$$

. . .

Em termos simples, o quão distantes estão os 50% valores do meio da variável.

. . .

```{r intervalo-interquartil-massa}
pinguins |>
  filter(!is.na(massa_corporal)) |>
  summarise(
    intervalo_interquartil_massa = IQR(massa_corporal),
    primeiro_quartil = quantile(massa_corporal, 0.25),
    terceiro_quartil = quantile(massa_corporal, 0.75)
  )
```

## Distribuição normal

A distribuição normal é uma das distribuições mais
importantes em estatística.

* Também conhecida como distribuição de Gauss, é
frequentemente usada para modelar fenômenos naturais
* Muitos testes estatísticos assumem que os dados
seguem uma distribuição normal
* 68% dos dados estão dentro de um desvio padrão da média,
95% estão dentro de dois desvios padrão e
99,7% estão dentro de três desvios padrão

. . .

```{r plot-distribuicao-normal}
#| fig-align: "center"
#| out.width: "60%"
#| echo: false
# Gerando uma amostra aleatória de uma distribuição normal padrão
set.seed(123)
amostra <- rnorm(1000)

# Calculando a média e o desvio padrão da amostra
media <- mean(amostra)
desvio_padrao <- sd(amostra)

# Criando um data frame com os limites das proporções 68-95-99
proporcoes <- data.frame(
  limite_inf = c(
    media - desvio_padrao,
    media - 2 * desvio_padrao,
    media - 3 * desvio_padrao,
    media - 4 * desvio_padrao
  ),
  limite_sup = c(
    media + desvio_padrao,
    media + 2 * desvio_padrao,
    media + 3 * desvio_padrao,
    media + 4 * desvio_padrao
  ),
  proporcao = c(0.6826, 0.9544, 0.9972, 0.9998)
)

# Criando o histograma
ggplot(data.frame(x = amostra), aes(x)) +
  geom_rect(xmin = -1,
            xmax = 1,
            ymin = 0,
            ymax = 250,
            fill = "tan1",
            alpha = 0.2) +
  geom_rect(xmin = -1,
            xmax = -2,
            ymin = 0,
            ymax = 250,
            fill = "gold",
            alpha = 0.2) +
  geom_rect(xmin = 1,
            xmax = 2,
            ymin = 0,
            ymax = 250,
            fill = "gold",
            alpha = 0.2) +
  geom_rect(xmin = 2,
            xmax = 3,
            ymin = 0,
            ymax = 250,
            fill = "pink",
            alpha = 0.2) +
  geom_rect(xmin = -2,
            xmax = -3,
            ymin = 0,
            ymax = 250,
            fill = "pink",
            alpha = 0.2) +
  geom_rect(xmin = 3,
            xmax = 4,
            ymin = 0,
            ymax = 250,
            fill = "palegreen",
            alpha = 0.2) +
  geom_rect(xmin = -3,
            xmax = -4,
            ymin = 0,
            ymax = 250,
            fill = "palegreen",
            alpha = 0.2) +
  geom_vline(
    xintercept = c(proporcoes$limite_inf, proporcoes$limite_sup),
    color = rep("grey30", 8),
    linetype = rep("dashed", 8),
    size = rep(1, 8),
    alpha = rep(1, 8)
  ) +
  geom_histogram(bins = 20,
                 color = "black",
                 fill = "lightblue") +
  geom_vline(
    xintercept = media,
    color = "grey20",
    linetype = "solid",
    size = 1
  ) +
  annotate("text", label = "34,13%",
           x = -0.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "34,13%",
           x = 0.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "13,59%",
           x = 1.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "13,59%",
           x = -1.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "2,14%",
           x = 2.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "2,14%",
           x = -2.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "0,13%",
           x = 3.5, y = 240,
           size = 4.5, family = "Charter") +
  annotate("text", label = "0,13%",
           x = -3.5, y = 240,
           size = 4.5, family = "Charter") +
  scale_x_continuous(
    breaks = -4:4,
    limits = c(-4.5, 4.5),
    labels = c(
      latex2exp::TeX("$\\mu - 4\\sigma$"),
      latex2exp::TeX("$\\mu - 3\\sigma$"),
      latex2exp::TeX("$\\mu - 2\\sigma$"),
      latex2exp::TeX("$\\mu - \\sigma$"),
      latex2exp::TeX("$\\mu$"),
      latex2exp::TeX("$\\mu + \\sigma$"),
      latex2exp::TeX("$\\mu + 2\\sigma$"),
      latex2exp::TeX("$\\mu + 3\\sigma$"),
      latex2exp::TeX("$\\mu + 4\\sigma$")
    )
  ) +
  scale_y_continuous(limits = c(0, 250)) +
  theme_classic(base_size = 16, base_family = "Charter") +
  labs(x = "Valores da amostra", y = "Frequência")
```

## Como testar normalidade?

Em muitos casos, é necessário verificar se uma amostra
segue uma distribuição normal antes de aplicar
determinados testes estatísticos.

* O teste de Shapiro-Wilk é um teste de normalidade que
verifica se uma amostra segue uma distribuição normal
* Se o $p$-valor do teste for menor do que o nível de
significância (geralmente 0,05), rejeita-se a hipótese
nula e conclui-se que a amostra não segue uma
distribuição normal

. . .

::: columns
::: {.column width="50%"}
```{r shapiro-amostra-simulada}
# Exemplo de distribuição normal

# Amostra de 500 sujeitos
# com média de 175cm e 10cm de desvio padrão
alturas_adultos <- rnorm(n = 500,
                         mean = 175,
                         sd = 10)

shapiro.test(alturas_adultos)
```
:::

::: {.column width="50%"}
```{r shapiro-massa-pinguins}
# Exemplo de variável que não segue uma
# distribuição normal
pinguins |> 
  pull(massa_corporal) |> 
  shapiro.test()
```
:::
:::

## Transformação de dados

Em alguns casos, os dados podem apresentar distribuições muito distorcidas, o
que pode afetar a validade dos testes estatísticos aplicados.

. . .

Para resolver esse problema, uma solução comum é aplicar uma transformação aos dados para deixá-los mais próximos de uma distribuição normal.

. . .

```{r plot-transformacao-de-dados}
#| fig-align: "center"
#| out.width: "70%"
#| echo: false
library(patchwork)
set.seed(123)
amostra <- rexp(10000)

original <- ggplot(data.frame(x = amostra), aes(x)) +
  geom_histogram(bins = 20, color = "black", fill = "lightblue") +
  labs(title = "Distribuição Original", y = "", x = "") +
  theme_minimal(base_size = 14, base_family = "Charter")

amostra_log <- log10(amostra)

logaritmo <- ggplot(data.frame(x = amostra_log), aes(x)) +
  geom_histogram(bins = 20, color = "black", fill = "lightgreen") +
  labs(title = "Transformação logarítmica", x = "", y = "") +
  theme_minimal(base_size = 14, base_family = "Charter")

amostra_sqrt <- sqrt(amostra)

raiz_quadrada <- ggplot(data.frame(x = amostra_sqrt), aes(x)) +
  geom_histogram(aes(y = ..density..), bins = 20, color = "black", fill = "darksalmon") +
  labs(title = "Transformação raíz quadrada", x = "", y = "") +
  theme_minimal(base_size = 14, base_family = "Charter")

amostra_raiz_cubica <- amostra^(1/3)

raiz_cubica <- ggplot(data.frame(x = amostra_raiz_cubica), aes(x)) +
  geom_histogram(aes(y = ..density..), bins = 20, color = "black", fill = "aquamarine") +
  labs(title = "Transformação raíz cúbica", x = "", y = "") +
  theme_minimal(base_size = 14, base_family = "Charter")

((original + logaritmo) / (raiz_quadrada + raiz_cubica)) +
  plot_annotation(title = "Dados simulados de 10.000 observações",
                  theme = theme(text = element_text(family = "Charter", size = 16)))
```

## Tabelas de frequência

A função `count()` do pacote `dplyr` pode ser usada para
contar valores (frequência) a partir de uma ou mais
variáveis.

. . .

```{r exemplo-basico-count}
pinguins |> 
  count(especie)
```

. . .

```{r tabulacao-cruzada-count}
pinguins |> 
  count(especie, ilha)
```

## Tarefa de casa

* Para a tarefa de casa, vamos seguir usando a base `pinguins` do pacote `dados`.

1. Filtre a base para manter apenas as observações do ano de 2009.
2. Verifique se a variável `comprimento_bico` da base de
dados segue uma distribuição normal através de um histograma
e um teste de normalidade de Shapiro-Wilk.
3. Com a função `count()`, verifique a frequência da
variável `sexo` na base de dados.
4. Com a função `summarise()`, calcule a média, mediana e
desvio padrão da variável `comprimento_nadadeira`.

* Dica de leitura: Capítulos 4 e 5 do livro
[Introduction to Modern Statistics](https://openintro-ims.netlify.app/).