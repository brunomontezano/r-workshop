---
title: "Distribuições e associações"
subtitle: "Semana 3"
author: "Bruno Montezano"
institute: "Programa de Pós-Graduação em Psiquiatria e Ciências do Comportamento\nUniversidade Federal do Rio Grande do Sul"
date: last-modified
date-format: long
lang: pt-br
execute:
  echo: true
format:
  revealjs:
    incremental: true
    theme: [default, ../assets/custom.scss]
    logo: "../assets/logo_ufrgs.png"
---

## Conteúdo de hoje

- *Pipes*
- Criando e modificando variáveis
- Distribuições
  - Tabulações e tabulações cruzadas
  - Resumo (sumarização) de dados
  - Correlações
  
## Pacote `tidyverse`

![](../assets/logo_tidyverse.png){fig-align="center" width=45%}

## Instalando o pacote `tidyverse` {.smaller}

Com ajuda do `tidyverse`, vamos praticar o carregamento e manipulação de dados.

. . .

Vamos usar pacotes chamados `readr` e `dplyr` para essas tarefas.

Estes pacotes são parte da família de pacotes [tidyverse](https://www.tidyverse.org/).

:::{.nonincremental}
- Eles facilitam bastante o uso do R
:::

. . .

Se você ainda não instalou o pacote `tidyverse`, digite no Console:
`install.packages("tidyverse")`.

. . .

Esse comando vai instalar uma *grande quantidade* de pacotes do R que vamos usar
ao longo do curso, incluindo o `readr`, `ggplot2` e o `dplyr`.

## Carregando os pacotes

```{r carregando readr-ggplot2-dplyr}
#| warning: true
library(readr)
library(ggplot2)
library(dplyr)
```

## Isso é algum tipo de erro? {.smaller}

Quando carregamos pacotes no R que possuem funções que compartilham do mesmo nome que
funções já carregadas, as funções mais recentemente carregadas sobrescrevem as
anteriores ("mascara-as").

. . .

Essa **mensagem** está apenas te informando esse processo.

. . .

Por vezes vocês vão receber uma **mensagem de aviso (warning)** ao carregar pacotes ---
geralmente porque vocês não estão rodando a última versão do R:

```
Warning message:
package `readr' was built under R version 4.2.2
```

Atualize o R para se livrar deste aviso!

## Importando e exportando dados

![](../assets/logo_readr.png){fig-align="center" width=45%}

## Arquivos de texto delimitados

Uma das formas mais comuns de armazenar dados é em um arquivo de texto delimitado,
como por exemplo: valores separados por vírgula (**.csv**) ou valores separados
por tabulação (**.csv**).

:::: {.columns}

::: {.column width="50%"}
Aqui estão dados em **.csv**:

```
"id","diagnostico","sexo","idade"
001,"thb","masculino",34
002,"tdm","feminino",25
003,"tdm","masculino",19
004,"thb","feminino",31
005,"tdm","feminino",24
006,"thb","masculino",21
```
:::

::: {.column width="50%"}
E aqui estão dados em **.tsv**:

```
"id"	"diagnostico"	"sexo"	"idade"
001	"thb"	"masculino"	34
002	"tdm"	"feminino"	25
003	"tdm"	"masculino"	19
004	"thb"	"feminino"	31
005	"tdm"	"feminino"	24
006	"thb"	"masculino"	21
```

:::

::::

## `readr` {.smaller}

R possui uma variedade de funções incorporadas para importar textos delimitados,
como `read.table()` e `read.csv()`.

Eu recomendo vocês usarem as versões de funções do pacote `readr`:
`read_csv()`, `read_tsv()` e `read_delim()`.

`readr` possui algumas vantagens:

- É mais rápido!
- Trabalha melhor com data e hora
- Possui uma função `problems()` quando você se depara com erros
- Barra de progresso para arquivos grandes

## Exemplo de importação com `readr`

Vamos usar a função `read_csv()` do `readr` para importar alguns dados
sobre pacientes fictícios:

```{r carregar-dados-pacientes}
pacientes <- read_csv(
  "https://raw.githubusercontent.com/brunomontezano/r-workshop/main/data/pacientes.csv"
)

head(pacientes)
```

## Pacote `dplyr`

![](../assets/logo_dplyr.png){fig-align="center" width=45%}


