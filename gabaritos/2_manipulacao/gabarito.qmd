---
title: "Gabarito da Aula 2: Manipulação de dados"
lang: pt-br
code-annotations: select
---

## 1. Escolha uma das bases de dados do pacote `dados` e utilize ao menos uma vez as funções: `select()`, `mutate()`, `filter()`, `arrange()`, `summarise()` e `group_by()` (as bases disponíveis podem ser acessadas no [site de referência do pacote](https://cienciadedatos.github.io/dados/reference/index.html)).

O exercício solicita que nós escolhamos alguma base de dados
do pacote `dados` para usar para na tarefa. Portanto, farei
uso de uma base de dados chamada `pinguins` que é uma das
incluídas no pacote `dados`.

Essa base de dados inclui espécies de pinguins e ilhas do [Arquipélago Palmer](https://pt.wikipedia.org/wiki/Arquip%C3%A9lago_Palmer),
medidas de cada espécie (comprimento da nadadeira, massa corporal e dimensões do
bico), sexo de cada pinguim e ano da documentação.

Segue abaixo a base de dados original:

```{r dados-pinguins}
#| echo: false
DT::datatable(dados::pinguins,
              options = list(
                language = list(url = "https://cdn.datatables.net/plug-ins/1.11.3/i18n/pt_br.json")
              ))
```


### 1.1. Função `select()`

A função `select()` pode ser usada para selecionar colunas
específicas da base de dados, ou até mesmo para remover
colunas indesejadas.

```{r exercicio-select}
#| message: false
# Solução 1 para `select()`
library(dados) # <1>
library(dplyr) # <1>

pinguins |> # <2>
  select(ano, ilha, comprimento_bico) # <3>
```

1. Carregar pacotes.
2. Especificar que usarei os dados `pinguins`.
3. Selecionar apenas as colunas especificadas.

```{r exercicio-select-remover}
# Solução 2 para `select()`
pinguins |>
  select(-comprimento_nadadeira, # <1>
         -profundidade_bico,-ilha, # <1>
         -massa_corporal) # <1>
```

1. Remover as colunas adicionando um `-` antes do nome da variável.

### 1.2. Função `mutate()`

#### Modificando uma variável

Como comentado em aula, uma das funcionalidades da função
`mutate()` é a de modificar uma variável já existente na base
de dados. Isto é feito utilizando o mutate e atribuindo como
nome da variável, o mesmo nome já usado. Dessa forma,
estaremos reatribuindo a variável (coluna) com os novos
valores, ou seja, modificando-a.

Vamos supor que desejamos modificar a variável da
`massa_corporal`, que está originalmente em gramas,
para quilogramas. Podemos fazer o seguinte:

```{r modificando-variavel}
# Solução 1 para `mutate()`
pinguins |> 
  mutate(massa_corporal = massa_corporal / 1000) |> # <1>
  relocate(massa_corporal, .before = everything()) # <2>
```

1. Transformando variável da massa corporal para unidade kg.
2. Posicionando coluna da `massa_corporal` antes de todas as outras.

A função `relocate()` do `dplyr` foi usada apenas para
colocar a variável `massa_corporal` (então modificada)
como a primeira variável (coluna) da base para que possamos
ver os novos valores atribuídos a ela.

#### Criando uma nova variável numérica

Em aula, também vimos como poderíamos criar uma nova
variável numérica usando o `mutate()`. Segue uma possível
solução abaixo onde calculamos a razão do bico, ou seja,
comprimento do bico dividido pela profundidade do bico:

```{r criando-variavel-numerica}
# Solução 2 para `mutate()`
pinguins |>
  mutate(razao_bico = comprimento_bico / profundidade_bico) |>
  relocate(razao_bico, .before = everything())
```

#### Criando uma variável categórica

Outra tarefa importante que podemos estar realizando com
`mutate()`, mas que não foi comentado diretamente em aula,
é a criação de variáveis categóricas. E isso pode ser feito
com o auxílio de uma outra função do pacote `dplyr` chamada
`case_when()`. Essa função nos ajuda a testar várias
expressões lógicas e atribuir valores à nossa nova variável
a partir das condições. Segue exemplo onde criamos categorias
para a massa corporal dos pinguins, onde até 3.000g
trata-se de um pinguim pequeno, 3.000g a 5.000g, um médio
e mais de 5.000g, grande.

```{r categoria-peso-pinguins}
# Solução 3 para `mutate()`
pinguins |>
  mutate(
    categoria_massa = case_when( # <1>
      massa_corporal < 3000 ~ "Pequeno", # <2>
      massa_corporal >= 3000 & massa_corporal < 5000 ~ "Médio", # <3>
      massa_corporal >= 5000 ~ "Grande" # <4>
    )
  ) |> # <5>
  relocate(c(categoria_massa, massa_corporal),
           .before = everything())
```

1. Inicia a função `case_when()`.
2. Caso `massa_corporal` seja menor que 3 mil gramas, é um penguim pequeno.
3. Caso `massa_corporal` seja maior ou igual que 3 mil gramas, e também menor que 5 mil gramas, é um penguim médio.
4. Caso `massa_corporal` seja maior ou igual que 5 mil gramas,
é um penguim grande.
5. Finalizar função `mutate()`.

### 1.3. Função `filter()`

Na solução abaixo, filtramos a base de dados para
manter apenas os pinguins-de-barbicha que possuem
massa corporal menor que 3.500g.

```{r manter-pinguins-de-barbicha}
# Solução para `filter()`
pinguins |> 
  filter(especie == "Pinguim-de-barbicha" & massa_corporal > 3500) # <1>
```

1. Notem que o `&` indica que todas as expressões lógicas
devem ser respeitadas. O pinguim deve ser `Pinguim-de-barbicha`
**e também** deve ter a `massa_corporal` maior que 3.500 gramas.

### 1.4. Função `arrange()`

No exemplo abaixo, ordenamos a base de forma decrescente
pelo `comprimento_bico` dos pinguins, ou seja, os pinguins
com bicos mais compridos estarão mais para cima na base
de dados.

```{r ordenar-massa-decrescente}
# Solução para `arrange()`
pinguins |> 
  arrange(desc(comprimento_bico)) # <1>
```

1. Percebam que os pinguins com os maiores bicos estão ao topo da tabela retornada pelo R.

### 1.5. Função `summarise()`

Nesta solução, calculo a média e o desvio padrão
da massa corporal dos pinguins-gentoo da base de dados
(notem que faço um `filter()` antes do `summarise()`).

```{r summarise-media-dp-massa-gentoo}
# Solução para `summarise()`
pinguins |>
  filter(especie == "Pinguim-gentoo") |> # <1>
  summarise( # <2>
    media_massa = mean(massa_corporal, na.rm = TRUE), # <2>
    dp_massa = sd(massa_corporal, na.rm = TRUE) # <2>
  ) # <2>
```

1. Primeiro, os dados foram filtrados para manter apenas os pinguins de espécie `Pinguim-gentoo`.
2. E então calculamos a média e desvio padrão. Notem o uso do argumento `na.rm = TRUE` para ignorar os `NA` nos cálculos.

### 1.6. Função `group_by()`

Como vimos em aula, a função `group_by()` foi criada para
que nós possamos rodar outras funções de forma agrupada
(estratificada) baseada em uma variável. Na solução
abaixo, calculamos a mediana e a média da massa corporal
dos pinguins estratificado pela espécie deles.

```{r media-mediana-massa-especie}
# Solução para `group_by()`
pinguins |>
  group_by(especie) |> # <1>
  summarise(
    mediana_massa = median(massa_corporal, na.rm = TRUE),
    media_massa = mean(massa_corporal, na.rm = TRUE)
  )
```

1. Percebam que usamos o `group_by()` antes do `summarise()`,
para que possamos receber os dados do `summarise()` de forma
agrupada.

Para fins de curiosidade, exponho também um argumento chamado
`.by =` da função `summarise()` que tem o mesmo propósito da
função `group_by()`. A solução acima ficaria da seguinte forma
com esta adaptação:

```{r solucao-group-by-com-arg-by}
pinguins |>
  summarise(
    mediana_massa = median(massa_corporal, na.rm = TRUE),
    media_massa = mean(massa_corporal, na.rm = TRUE),
    .by = especie # <1>
  )
```

1. Notem que com o uso deste argumento `.by =`, o resultado
é o mesmo.
  
## 2. Nos dados `questionario` do pacote `dados`, crie um subconjunto apenas com as observações do ano de 2014 e armazene em um objeto chamado `dados_2014`.

Segue solução abaixo:

```{r questionario-2014}
# Solução para Exercício 2
dados_2014 <- questionario |> # <1>
  filter(ano == 2014) # <2>

dados_2014 # <3>
```

1. Primeiro, especificamos o nome do objeto a ser atribuído e
quais dados estão sendo trabalhados.
2. Então, filtramos os dados para manter apenas as observações
coletadas no `ano` de 2014.
3. Por fim, mostramos o resultado da criação do subconjunto
escrevendo o nome do objeto e rodando.